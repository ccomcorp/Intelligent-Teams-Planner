version: '3.9'

# Named volumes for persistent data storage
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  qdrant_data:
    driver: local
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local

# Private network for secure inter-service communication
networks:
  planner_network:
    driver: bridge

services:
  # PostgreSQL Database - Primary data store
  postgres:
    image: postgres:16
    container_name: planner_postgres
    environment:
      POSTGRES_DB: planner
      POSTGRES_USER: planner
      POSTGRES_PASSWORD: planner123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./logs:/var/log/postgresql
    networks:
      - planner_network
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U planner -d planner"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis - Caching layer
  redis:
    image: redis:7-alpine
    container_name: planner_redis
    volumes:
      - redis_data:/data
    networks:
      - planner_network
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Qdrant - Vector database for RAG
  qdrant:
    image: qdrant/qdrant:latest
    container_name: planner_qdrant
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - planner_network
    ports:
      - "6333:6333"
      - "6334:6334"
    restart: unless-stopped
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Neo4j - Graph database for relationships
  neo4j:
    image: neo4j:5
    container_name: planner_neo4j
    environment:
      NEO4J_AUTH: neo4j/planner123
      NEO4J_PLUGINS: '["apoc"]'
      NEO4J_dbms_security_procedures_unrestricted: apoc.*
      NEO4J_dbms_security_procedures_allowlist: apoc.*
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    networks:
      - planner_network
    ports:
      - "7474:7474"
      - "7687:7687"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "planner123", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Planner MCP Server - Microsoft Graph API integration
  planner-mcp-server:
    build:
      context: ./planner-mcp-server
      dockerfile: Dockerfile
    container_name: planner_mcp_server
    environment:
      - DATABASE_URL=postgresql://planner:planner123@postgres:5432/planner
      - REDIS_URL=redis://redis:6379
      - MS_CLIENT_ID=${MS_CLIENT_ID}
      - MS_CLIENT_SECRET=${MS_CLIENT_SECRET}
      - MS_TENANT_ID=${MS_TENANT_ID}
      - LOG_LEVEL=INFO
    volumes:
      - ./logs:/app/logs
    networks:
      - planner_network
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 15s
      timeout: 5s
      retries: 3

  # MCPO Proxy - MCP to OpenAPI translation
  mcpo-proxy:
    build:
      context: ./mcpo-proxy
      dockerfile: Dockerfile
    container_name: planner_mcpo_proxy
    environment:
      - MCP_SERVER_URL=http://planner-mcp-server:8000
      - LOG_LEVEL=INFO
    volumes:
      - ./logs:/app/logs
    networks:
      - planner_network
    ports:
      - "8001:8000"
    depends_on:
      planner-mcp-server:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 15s
      timeout: 5s
      retries: 3

  # RAG Service - Document processing and retrieval
  rag-service:
    build:
      context: ./rag-service
      dockerfile: Dockerfile
    container_name: planner_rag_service
    environment:
      - DATABASE_URL=postgresql://planner:planner123@postgres:5432/planner
      - QDRANT_URL=http://qdrant:6333
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=INFO
    volumes:
      - ./logs:/app/logs
      - ./output:/app/output
    networks:
      - planner_network
    ports:
      - "8002:8000"
    depends_on:
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 15s
      timeout: 5s
      retries: 3

  # Graphiti Service - Graph knowledge management
  graphiti-service:
    build:
      context: ./graphiti-service
      dockerfile: Dockerfile
    container_name: planner_graphiti_service
    environment:
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=planner123
      - DATABASE_URL=postgresql://planner:planner123@postgres:5432/planner
      - LOG_LEVEL=INFO
    volumes:
      - ./logs:/app/logs
    networks:
      - planner_network
    ports:
      - "8003:8000"
    depends_on:
      neo4j:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 15s
      timeout: 5s
      retries: 3

  # Document Generator - PDF, Word, PowerPoint generation
  doc-generator:
    build:
      context: ./doc-generator
      dockerfile: Dockerfile
    container_name: planner_doc_generator
    environment:
      - DATABASE_URL=postgresql://planner:planner123@postgres:5432/planner
      - LOG_LEVEL=INFO
    volumes:
      - ./logs:/app/logs
      - ./output:/app/output
    networks:
      - planner_network
    ports:
      - "8004:8000"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 15s
      timeout: 5s
      retries: 3

  # Web Crawler - Crawl4ai for web content
  web-crawler:
    build:
      context: ./web-crawler
      dockerfile: Dockerfile
    container_name: planner_web_crawler
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://planner:planner123@postgres:5432/planner
      - LOG_LEVEL=INFO
    volumes:
      - ./logs:/app/logs
    networks:
      - planner_network
    ports:
      - "8005:8000"
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 15s
      timeout: 5s
      retries: 3