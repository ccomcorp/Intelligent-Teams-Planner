version: '3.8'

services:
  # Core Database - PostgreSQL with pgvector
  postgres:
    image: pgvector/pgvector:pg16
    container_name: itp-postgres
    environment:
      POSTGRES_DB: intelligent_teams_planner
      POSTGRES_USER: itp_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-itp_password_2024}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U itp_user -d intelligent_teams_planner"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - itp-network

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: itp-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password_2024}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - itp-network

  # OpenWebUI - Central Conversational Hub
  openwebui:
    image: ghcr.io/open-webui/open-webui:main
    container_name: itp-openwebui
    environment:
      - OPENAI_API_BASE_URL=http://mcpo-proxy:8001/v1
      - OPENAI_API_KEY=${OPENAI_API_KEY:-dummy-key}
      - WEBUI_SECRET_KEY=${WEBUI_SECRET_KEY:-your-secret-key}
      - DATABASE_URL=postgresql://itp_user:${POSTGRES_PASSWORD:-itp_password_2024}@postgres:5432/intelligent_teams_planner
      - ENABLE_RAG_WEB_SEARCH=true
      - ENABLE_RAG_WEB_LOADER=true
      - RAG_EMBEDDING_ENGINE=openai
      - RAG_EMBEDDING_MODEL=text-embedding-3-small
      - CHROMA_TENANT=default_tenant
      - CHROMA_DATABASE=default_database
      - PDF_EXTRACT_IMAGES=true
      - CHUNK_SIZE=1000
      - CHUNK_OVERLAP=100
    volumes:
      - openwebui_data:/app/backend/data
      - ./openwebui/config:/app/backend/config
    ports:
      - "3000:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mcpo-proxy:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - itp-network

  # MCPO Proxy - Translation layer between OpenWebUI and MCP
  mcpo-proxy:
    build:
      context: ./mcpo-proxy
      dockerfile: Dockerfile
    container_name: itp-mcpo-proxy
    environment:
      - MCP_SERVER_URL=http://planner-mcp-server:8000
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password_2024}@redis:6379
      - LOG_LEVEL=INFO
      - CORS_ORIGINS=http://localhost:3000,http://openwebui:8080
    volumes:
      - ./mcpo-proxy/config:/app/config
    ports:
      - "8001:8001"
    depends_on:
      redis:
        condition: service_healthy
      planner-mcp-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - itp-network

  # Planner MCP Server - Core business logic
  planner-mcp-server:
    build:
      context: ./planner-mcp-server
      dockerfile: Dockerfile
    container_name: itp-planner-mcp
    environment:
      - DATABASE_URL=postgresql://itp_user:${POSTGRES_PASSWORD:-itp_password_2024}@postgres:5432/intelligent_teams_planner
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password_2024}@redis:6379
      - MICROSOFT_CLIENT_ID=${MICROSOFT_CLIENT_ID}
      - MICROSOFT_CLIENT_SECRET=${MICROSOFT_CLIENT_SECRET}
      - MICROSOFT_TENANT_ID=${MICROSOFT_TENANT_ID}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY:-your-encryption-key-32-chars}
      - LOG_LEVEL=INFO
      - GRAPH_API_VERSION=v1.0
      - TOKEN_CACHE_TTL=3600
      - RATE_LIMIT_REQUESTS=100
      - RATE_LIMIT_WINDOW=60
    volumes:
      - ./planner-mcp-server/config:/app/config
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - itp-network

  # Teams Bot - Thin client for Microsoft Teams
  teams-bot:
    build:
      context: ./teams-bot
      dockerfile: Dockerfile
    container_name: itp-teams-bot
    environment:
      - BOT_ID=${BOT_ID}
      - BOT_PASSWORD=${BOT_PASSWORD}
      - OPENWEBUI_URL=http://openwebui:8080
      - OPENWEBUI_API_KEY=${OPENWEBUI_API_KEY}
      - TEAMS_APP_ID=${TEAMS_APP_ID}
      - LOG_LEVEL=INFO
    volumes:
      - ./teams-bot/config:/app/config
    ports:
      - "3978:3978"
    depends_on:
      openwebui:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3978/api/messages"]
      interval: 15s
      timeout: 10s
      retries: 3
    networks:
      - itp-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  openwebui_data:
    driver: local

networks:
  itp-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16