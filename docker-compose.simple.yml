version: '3.8'

# Simplified Docker Compose for immediate deployment
# Focus on getting infrastructure and OpenWebUI running first

services:
  # Core Database - PostgreSQL with pgvector
  postgres:
    image: pgvector/pgvector:pg16
    container_name: itp-postgres-simple
    environment:
      POSTGRES_DB: intelligent_teams_planner
      POSTGRES_USER: itp_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-itp_password_2024}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_simple_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U itp_user -d intelligent_teams_planner"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - itp-simple-network
    restart: unless-stopped

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: itp-redis-simple
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password_2024}
    volumes:
      - redis_simple_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - itp-simple-network
    restart: unless-stopped

  # Neo4j Knowledge Graph Database
  neo4j:
    image: neo4j:5.15-community
    container_name: itp-neo4j-simple
    environment:
      - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD:-neo4j_password_2024}
      - NEO4J_PLUGINS=["apoc","graph-data-science"]
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_import_file_use__neo4j__config=true
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    volumes:
      - neo4j_simple_data:/data
      - neo4j_simple_logs:/logs
      - neo4j_simple_import:/var/lib/neo4j/import
      - neo4j_simple_plugins:/plugins
    healthcheck:
      test: ["CMD-SHELL", "echo 'RETURN 1' | cypher-shell -u neo4j -p neo4j_password_2024 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - itp-simple-network

  # MCP Server (Core Planning Service)
  planner-mcp-server:
    build:
      context: ./planner-mcp-server
      dockerfile: Dockerfile.uv
    container_name: itp-planner-mcp-simple
    ports:
      - "7100:7100"
    volumes:
      - ./planner-mcp-server/src:/app/src     # Source code (read-write for development)
      - planner_mcp_logs:/app/logs             # Application logs
      - planner_mcp_data:/app/data             # Application data & cache
    environment:
      - DATABASE_URL=postgresql+asyncpg://itp_user:${POSTGRES_PASSWORD:-itp_password_2024}@postgres:5432/intelligent_teams_planner
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-neo4j_password_2024}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password_2024}@redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis_password_2024}
      - MCP_SERVER_PORT=7100
      - ENCRYPTION_KEY=${ENCRYPTION_KEY:-ITP_ENCRYPTION_KEY_2024_SECURE}
      - MICROSOFT_TENANT_ID=${MICROSOFT_TENANT_ID:-demo-tenant-id}
      - MICROSOFT_CLIENT_ID=${MICROSOFT_CLIENT_ID:-demo-client-id}
      - MICROSOFT_CLIENT_SECRET=${MICROSOFT_CLIENT_SECRET:-demo-client-secret}
      - MICROSOFT_REDIRECT_URI=${MICROSOFT_REDIRECT_URI:-http://localhost:7100/auth/callback}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7100/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - itp-simple-network

  # MCPO Proxy (Microsoft 365 Integration)
  mcpo-proxy:
    build:
      context: ./mcpo-proxy
      dockerfile: Dockerfile.uv
    container_name: itp-mcpo-proxy-simple
    ports:
      - "7105:7105"
    volumes:
      - ./mcpo-proxy/src:/app/src             # Source code (read-write for development)
      - mcpo_proxy_logs:/app/logs             # Application logs
      - mcpo_proxy_data:/app/data             # Application data & cache
    environment:
      - PLANNER_MCP_URL=http://planner-mcp-server:7100
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password_2024}@redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis_password_2024}
      - MCPO_PROXY_PORT=7105
    depends_on:
      planner-mcp-server:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7105/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - itp-simple-network

  # Teams Bot (Microsoft Teams Interface)
  teams-bot:
    build:
      context: ./teams-bot
      dockerfile: Dockerfile.uv
    container_name: itp-teams-bot-simple
    ports:
      - "7110:7110"
    volumes:
      - ./teams-bot/src:/app/src              # Source code (read-write for development)
      - teams_bot_logs:/app/logs              # Application logs
      - teams_bot_data:/app/data              # Application data & cache
    environment:
      - BOT_ID=${BOT_ID:-test-bot-id}
      - BOT_PASSWORD=${BOT_PASSWORD:-test-bot-password}
      - OPENWEBUI_URL=http://host.docker.internal:8899
      - MCPO_PROXY_URL=http://mcpo-proxy:7105
      - PLANNER_MCP_URL=http://planner-mcp-server:7100
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password_2024}@redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis_password_2024}
      - TEAMS_BOT_PORT=7110
      - PORT=7110
    depends_on:
      mcpo-proxy:
        condition: service_healthy
      planner-mcp-server:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7110/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - itp-simple-network

  # RAG Service (Document Processing & Semantic Search)
  rag-service:
    build:
      context: ./rag-service
      dockerfile: Dockerfile.uv
    container_name: itp-rag-service-simple
    ports:
      - "7120:7120"
    volumes:
      - ./rag-service/src:/app/src            # Source code (read-write for development)
      - rag_service_logs:/app/logs            # Application logs
      - rag_service_data:/app/data            # Application data, embeddings & cache
      - rag_service_uploads:/app/uploads      # Uploaded documents
    environment:
      - DATABASE_URL=postgresql+asyncpg://itp_user:${POSTGRES_PASSWORD:-itp_password_2024}@postgres:5432/intelligent_teams_planner
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-neo4j_password_2024}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password_2024}@redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis_password_2024}
      - PLANNER_MCP_URL=http://planner-mcp-server:7100
      - RAG_SERVICE_PORT=7120
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      planner-mcp-server:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7120/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - itp-simple-network

# OpenWebUI removed - using separate standalone container
# Container ID: f9cc2bf3b1e6fe9752c9d790d535ac25826eb0f13cf270af4f99709e08e93079

# Networks
networks:
  itp-simple-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.23.0.0/16

# Volumes
volumes:
  # Database volumes
  postgres_simple_data:
    driver: local
  redis_simple_data:
    driver: local
# openwebui_simple_data removed - using separate container
  neo4j_simple_data:
    driver: local
  neo4j_simple_logs:
    driver: local
  neo4j_simple_import:
    driver: local
  neo4j_simple_plugins:
    driver: local

  # Application service volumes
  planner_mcp_logs:
    driver: local
  planner_mcp_data:
    driver: local
  mcpo_proxy_logs:
    driver: local
  mcpo_proxy_data:
    driver: local
  teams_bot_logs:
    driver: local
  teams_bot_data:
    driver: local
  rag_service_logs:
    driver: local
  rag_service_data:
    driver: local
  rag_service_uploads:
    driver: local